apply plugin: 'com.android.library'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'

checkstyle {
    toolVersion '6.7'
}

android {
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
    lintOptions {
        warning 'InvalidPackage'
    }
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    if (project.hasProperty("username")) {
        project.ext.username = project.getProperty("username")
    } else {
        project.ext.username = ""
    }
    if (project.hasProperty("password")) {
        project.ext.password = project.getProperty("password")
    } else {
        project.ext.password = ""
    }
//     If you wish debug a connectedTest inside your Android Studio,
//     uncomment the following two lines and fill your own credential.
//     But keep in mind that you should not commit the change!!!
//    project.ext.username = ""
//    project.ext.password = ""
    buildTypes {
        debug {
            testCoverageEnabled = true
            buildConfigField 'String', 'USERNAME', "\"${project.username}\""
            buildConfigField 'String', 'PASSWORD', "\"${project.password}\""
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

task checkstyleMain(type: Checkstyle) {
    configFile file('../config/google_checks.xml')
    source 'src'
    include '**/*.java'

    classpath = files()
}

task findbugsMain(type: FindBugs) {
    classes = fileTree("$buildDir/intermediates/classes/debug")
    source = fileTree("src")
    classpath = files()
    effort = "max"
    reports {
        xml.enabled = false
        html.enabled = true
    }
    ignoreFailures = false
    excludeFilter = file("${project.rootDir}/config/findbugs-excludeFilter.xml")
}

task genCheckstyleHtml << {
    if (file("$buildDir/reports/checkstyle/main.xml").exists()) {
        ant.xslt(in: "$buildDir/reports/checkstyle/main.xml",
                style: "../config/checkstyle-noframes-severity-sorted.xsl",
                out: "$buildDir/reports/checkstyle/main.html")
    }
}

checkstyleMain.finalizedBy genCheckstyleHtml

findbugsMain.dependsOn "compileDebugSources"

task pmdMain(type: Pmd) {
    source fileTree('src')
    include '**/*.java'

    ruleSetFiles = files("../config/pmd_ruleset.xml")

    reports {
        xml.enabled = false
        html.enabled = true
    }

    ignoreFailures = false
}

check.finalizedBy findbugsMain
check.finalizedBy checkstyleMain
check.finalizedBy pmdMain

dependencies {
    provided fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.github.mulab:rx-realm:1.0.0'
    compile 'mu.lab:log:1.0.0'
    compile 'io.reactivex:rxandroid:1.0.1'
    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    compile 'io.reactivex:rxjava:1.0.14'
    compile 'com.squareup.okhttp:okhttp:2.5.0'
    compile 'io.realm:realm-android:0.82.2'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.json:json:20140107'
    androidTestCompile 'com.android.support.test:runner:0.3'
    androidTestCompile 'com.android.support.test:rules:0.3'
    compile 'com.google.code.gson:gson:2.4'
}
